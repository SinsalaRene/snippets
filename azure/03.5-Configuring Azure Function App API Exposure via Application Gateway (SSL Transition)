# To transition your Azure Application Gateway setup from HTTP to HTTPS (SSL/TLS) in your Azure Landing Zone, I’ll provide detailed steps to enable SSL for secure communication between the internet, Application Gateway, and the Function App’s private endpoint, while maintaining the hub-and-spoke architecture with traffic routing through the Fortinet HA Firewall. This builds on the non-SSL configuration (artifact ID `111c0078-2204-4a47-b48f-bd92036d3bd6`) by adding SSL transition steps, ensuring encrypted traffic end-to-end. I’ll explain how to obtain and configure certificates, update Application Gateway components, adjust the Fortinet Firewall, and verify the HTTPS setup, keeping the same artifact ID for continuity.

### Context Recap
- **Current Setup**: Your Function App (Flexible Plan) in a spoke VNet uses a private endpoint (no outbound needs, no VNet integration) to expose its API via an Application Gateway (in a separate subscription) over HTTP (port 80) for testing. Traffic routes through a Fortinet HA Firewall in the hub VNet, with no direct internet access to the Function App.
- **Goal**: Transition to HTTPS (port 443) to secure traffic with SSL/TLS, replacing the insecure HTTP setup.
- **Approach**: Enable SSL on the Application Gateway’s listener (frontend) and ensure HTTPS communication to the Function App’s private endpoint (backend), updating firewall policies and verifying the setup.

### SSL Transition Overview
To enable SSL, you’ll need:
1. An **SSL certificate** for the Application Gateway’s public-facing listener (e.g., for `api.contoso.com`).
2. Optionally, a certificate for end-to-end SSL (Application Gateway to Function App), though Azure Function Apps often use a built-in `*.azurewebsites.net` certificate.
3. Updates to Application Gateway components (listener, HTTP settings, health probe, routing rule) to use HTTPS.
4. Fortinet Firewall policy updates to allow port 443 traffic.
5. Verification tests to ensure HTTPS works end-to-end.

Since this is a test-to-production transition, I’ll assume you want a secure, production-ready setup using a trusted certificate authority (CA) like Let’s Encrypt or Azure Key Vault, with options for self-signed certificates for testing.

---


# Configuring Azure Function App API Exposure via Application Gateway (SSL Transition)

This guide details how to transition an Azure Function App (Flexible Plan) API exposure from HTTP to HTTPS in a hub-and-spoke Azure Landing Zone, securing traffic with SSL/TLS. The Function App in a spoke subscription uses a private endpoint, with traffic routed through a Fortinet HA Firewall in the hub VNet and exposed via an Application Gateway in a separate subscription. It includes SSL transition steps, updated Application Gateway configurations, and verification procedures.

## Architecture Overview
- **Hub Subscription**: Fortinet HA Firewall in the hub VNet (e.g., internal IP `10.0.0.4`).
- **Spoke Subscription**: Function App (Flexible Plan) in a spoke VNet peered to the hub, with a private endpoint (e.g., `10.2.1.5`) for inbound traffic.
- **Application Gateway Subscription**: Application Gateway (with optional WAF) for public-facing API exposure.
- **Traffic Flow**: Internet → Application Gateway (HTTPS) → Fortinet Firewall (hub) → Function App (spoke, private endpoint).

## Prerequisites
- Existing HTTP setup as per previous configuration (HTTP listener on port 80, backend pool targeting `myfunctionapp.azurewebsites.net` or `10.2.1.5`, etc.).
- Hub VNet with Fortinet HA Firewall deployed.
- Spoke VNet peered to the hub VNet with bidirectional peering.
- Private DNS Zone (e.g., `privatelink.azurewebsites.net`) linked to spoke and Application Gateway VNets, resolving `myfunctionapp.azurewebsites.net` to `10.2.1.5`.
- Application Gateway deployed with a public IP (e.g., `20.50.60.70`).
- Function App with a health endpoint (e.g., `/api/health` returning HTTP 200).
- NSGs or Function App access restrictions blocking direct internet access.
- No VNet integration (per requirement of no outbound needs).

## SSL Transition Steps

### Step 1: Obtain SSL Certificates
1. **For Application Gateway Listener (Frontend)**:
   - **Option 1: Trusted CA (Production)**:
     - Obtain a certificate for your domain (e.g., `api.contoso.com`) from a trusted CA like Let’s Encrypt, DigiCert, or via Azure Key Vault.
     - **Let’s Encrypt Example**:
       - Use Certbot to generate a certificate: `certbot certonly --manual --preferred-challenges dns -d api.contoso.com`.
       - Follow DNS validation instructions to add a TXT record to your domain.
       - Export the certificate as a PFX file with a password: `openssl pkcs12 -export -out certificate.pfx -inkey privkey.pem -in fullchain.pem`.
     - **Azure Key Vault Example**:
       - Create a Key Vault and import or generate a certificate: `az keyvault certificate import --vault-name MyVault --name MyCert --file certificate.pfx --password <password>`.
       - Grant the Application Gateway access to the Key Vault: `az keyvault set-policy --name MyVault --object-id <app-gw-managed-identity> --certificate-permissions get`.
   - **Option 2: Self-Signed Certificate (Testing)**:
     - Generate a self-signed certificate: `openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=api.contoso.com"`.
     - Convert to PFX: `openssl pkcs12 -export -out certificate.pfx -inkey key.pem -in cert.pem -password pass:MyPassword`.
     - **Note**: Self-signed certificates require clients to trust the certificate manually, unsuitable for production.
2. **For End-to-End SSL (Backend, Optional)**:
   - Azure Function Apps use a built-in `*.azurewebsites.net` certificate for `myfunctionapp.azurewebsites.net`, which is trusted by the Application Gateway.
   - If using a custom domain or requiring a specific certificate, upload it to the Function App:
     - Go to Function App → Settings → TLS/SSL settings → Private Key Certificates → Upload Certificate.
     - Use the same PFX file as above if the domain matches.
   - For testing, you can use the default Azure certificate or skip end-to-end SSL (use HTTP to backend, less secure).

### Step 2: Update Application Gateway for HTTPS
1. **Upload Frontend Certificate**:
   - Go to Application Gateway → Certificates → Add.
   - Name: `AppGwCert`.
   - Upload the PFX file (e.g., `certificate.pfx`) and provide the password.
   - For Key Vault, select the certificate from the vault using the Application Gateway’s managed identity.
2. **Update Listener**:
   - **Option 1: Replace Existing Listener**:
     - Go to Application Gateway → Listeners → `FunctionAppListener` → Edit.
     - Change Protocol to HTTPS (port 443).
     - Select the certificate (`AppGwCert`).
     - Hostname: `api.contoso.com` (ensure DNS points to the public IP, e.g., `20.50.60.70`).
   - **Option 2: Create New Listener (for gradual transition)**:
     - Name: `FunctionAppHttpsListener`.
     - Frontend IP: Public IP (e.g., `20.50.60.70`).
     - Protocol: HTTPS (port 443).
     - Certificate: `AppGwCert`.
     - Hostname: `api.contoso.com`.
     - Keep the HTTP listener (port 80) temporarily for testing, then remove it later.
3. **Update HTTP Settings**:
   - Go to HTTP Settings → `FunctionAppHttpSettings` → Edit.
   - Change Protocol to HTTPS (port 443).
   - Enable “Use for App Service” (handles Azure-specific headers).
   - Host Name Override: `myfunctionapp.azurewebsites.net`.
   - **End-to-End SSL (Recommended)**:
     - Enable “Use well-known CA certificate” (trusts the `*.azurewebsites.net` certificate).
     - Alternatively, upload a backend certificate if using a custom domain: Select `AppGwCert` or a specific backend certificate.
   - **HTTP to Backend (Less Secure, for Testing)**:
     - Keep backend protocol as HTTP (port 80) to avoid backend certificate configuration.
     - **Note**: This encrypts only frontend traffic, leaving backend traffic unencrypted.
4. **Update Health Probe**:
   - Go to Probes → `FunctionAppHealthProbe` → Edit.
   - Change Protocol to HTTPS (port 443).
   - Host: `myfunctionapp.azurewebsites.net` (or `10.2.1.5`).
   - Path: `/api/health`.
   - Ensure the Function App’s health endpoint supports HTTPS (default behavior).
   - If using HTTP to backend, keep probe protocol as HTTP (port 80).
5. **Update Routing Rule**:
   - Go to Rules → `FunctionAppRule` → Edit.
   - If using the new HTTPS listener, update to `FunctionAppHttpsListener`.
   - Backend Pool: `FunctionAppBackend` (unchanged).
   - HTTP Settings: `FunctionAppHttpSettings` (now HTTPS or HTTP based on backend choice).
   - **New Rule for HTTPS (if keeping HTTP temporarily)**:
     - Name: `FunctionAppHttpsRule`.
     - Listener: `FunctionAppHttpsListener`.
     - Backend Pool: `FunctionAppBackend`.
     - HTTP Settings: `FunctionAppHttpSettings`.
6. **WAF Configuration (if enabled)**:
   - No changes needed, as WAF works with HTTPS.
   - Verify ruleset (OWASP 3.2) and adjust exclusions if HTTPS traffic triggers false positives.

### Step 3: Update Fortinet HA Firewall
1. **Update Ingress Policy**:
   - Modify the existing policy to allow HTTPS traffic from the Application Gateway’s subnet (e.g., `10.1.0.0/24`) to the Function App’s private endpoint (e.g., `10.2.1.5`) on port 443.
   - Example: Source IP: `10.1.0.0/24`, Destination IP: `10.2.1.5`, Port: 443.
   - If using HTTP to backend, keep port 80.
2. **Update Egress Policy**:
   - Allow return traffic from `10.2.1.5` to `10.1.0.0/24` on port 443 (or 80 if HTTP to backend).
3. **NAT Configuration** (if needed):
   - Update NAT rules to forward port 443 traffic (or keep port 80 if HTTP to backend).
   - Example: Inbound NAT mapping `10.1.0.0/24:443` to `10.2.1.5:443`.
4. **Enable SSL Inspection** (optional):
   - If required, configure the Fortinet Firewall to inspect SSL traffic (deep packet inspection).
   - Upload a trusted CA certificate to the firewall for re-signing traffic.
   - **Note**: SSL inspection adds complexity and may require client trust of the firewall’s certificate.

### Step 4: Verify and Test HTTPS Configuration
Each component is tested independently to ensure the SSL transition is successful.

#### **Test 1: Frontend SSL (Listener and Certificate)**
- **Goal**: Verify the Application Gateway accepts HTTPS requests with the correct certificate.
- **Steps**:
  1. From an external machine, run: `curl -v https://api.contoso.com/api/health`.
     - Expected: HTTP 200 response, with certificate details (e.g., issuer, subject `CN=api.contoso.com`).
     - For self-signed certificates, use `-k` to bypass verification: `curl -vk https://api.contoso.com/api/health`.
  2. Use a browser to access `https://api.contoso.com/api/health`.
     - Expected: Secure connection (padlock icon) for trusted CA certificates; warning for self-signed.
  3. Check Application Gateway logs:
     - Query: `AzureDiagnostics | where ResourceType == "APPLICATIONGATEWAYS" and OperationName == "ApplicationGatewayAccess"`.
     - Expected: Logs show HTTPS requests on port 443.
  4. Test HTTP fallback: `curl http://api.contoso.com/api/health`.
     - Expected: Fails if HTTP listener is removed; otherwise, redirects or responds based on configuration.
- **Troubleshooting**:
  - If connection fails, verify the certificate is correctly uploaded and associated with the listener.
  - Ensure DNS (`api.contoso.com`) resolves to the public IP (`20.50.60.70`).
  - Check NSGs on the Application Gateway’s subnet for port 443 access.

#### **Test 2: Backend HTTPS (HTTP Settings and Health Probe)**
- **Goal**: Confirm the Application Gateway communicates with the Function App over HTTPS (or HTTP if chosen).
- **Steps**:
  1. Check backend health:
     - Go to Application Gateway → Backend Health.
     - Expected: `FunctionAppBackend` shows “Healthy” for `myfunctionapp.azurewebsites.net` or `10.2.1.5`.
  2. Deploy a test VM in the Application Gateway’s VNet.
  3. Run: `curl -vk https://myfunctionapp.azurewebsites.net/api/health` (or `curl http://10.2.1.5/api/health` if HTTP to backend).
     - Expected: HTTP 200 response, routed via the Fortinet Firewall.
  4. Verify certificate (if HTTPS to backend):
     - Check `curl -v` output for `*.azurewebsites.net` certificate or custom certificate details.
- **Troubleshooting**:
  - If backend is unhealthy, verify the health probe path (`/api/health`) and port (443 or 80).
  - Ensure Private DNS resolves `myfunctionapp.azurewebsites.net` to `10.2.1.5`.
  - If using a custom backend certificate, ensure it’s uploaded and trusted.

#### **Test 3: Fortinet Firewall SSL Routing**
- **Goal**: Validate the firewall routes HTTPS traffic correctly.
- **Steps**:
  1. Check firewall logs for traffic from `10.1.0.0/24` to `10.2.1.5` on port 443 (or 80 if HTTP to backend).
     - Expected: Logs show allowed traffic.
  2. Temporarily disable the ingress policy and send a request: `curl -vk https://api.contoso.com/api/health`.
     - Expected: Request fails (timeout or blocked).
  3. Re-enable the policy and retry.
     - Expected: HTTP 200 response.
  4. Verify return traffic logs for `10.2.1.5` to `10.1.0.0/24` on port 443 (or 80).
- **Troubleshooting**:
  - Verify policy source/destination IPs and port (443 or 80).
  - Check NAT rules if applied.
  - Ensure VNet peering allows traffic forwarding.

#### **Test 4: End-to-End HTTPS Connectivity**
- **Goal**: Confirm the full traffic flow (Internet → Application Gateway → Firewall → Function App) over HTTPS.
- **Steps**:
  1. Run: `curl -v https://api.contoso.com/api/health`.
     - Expected: HTTP 200 response with valid certificate chain.
  2. Check logs:
     - Application Gateway: Confirm HTTPS requests hit backend.
     - Fortinet Firewall: Verify bidirectional traffic on port 443 (or 80).
  3. Attempt direct access: `curl https://myfunctionapp.azurewebsites.net/api/health`.
     - Expected: Connection timeout (private endpoint blocks public access).
  4. If HTTP listener remains, test: `curl http://api.contoso.com/api/health`.
     - Expected: Fails or redirects to HTTPS if configured (e.g., via rewrite rules).
- **Troubleshooting**:
  - Isolate issues using Tests 1–3.
  - Verify Private DNS and VNet peering.

### Step 5: Clean Up HTTP Configuration
1. **Remove HTTP Listener**:
   - Go to Application Gateway → Listeners → Delete `FunctionAppListener` (HTTP, port 80).
2. **Remove HTTP Rule** (if separate):
   - Delete `FunctionAppRule` if using `FunctionAppHttpsRule`.
3. **Update Firewall Policies**:
   - Remove port 80 policies if no longer needed.
4. **Configure HTTP-to-HTTPS Redirect** (optional):
   - Add a new HTTP listener (port 80) and a redirect rule to forward `http://api.contoso.com` to `https://api.contoso.com`.
   - Setup: Create a redirect configuration in Application Gateway → Redirects → Add, targeting the HTTPS listener.

### Security Considerations
- **Certificate Management**: Renew certificates before expiration (e.g., Let’s Encrypt certificates last 90 days). Use Azure Key Vault for automated renewals.
- **End-to-End SSL**: Prefer HTTPS to backend for full encryption. Using HTTP to backend leaves traffic unencrypted between the Application Gateway and Function App.
- **WAF**: HTTPS enhances WAF effectiveness by encrypting traffic. Regularly tune rules to minimize false positives.
- **NSG Hardening**: Allow only port 443 on the Application Gateway’s subnet.
- **Monitoring**: Use Application Insights for the Function App and Azure Monitor for the Application Gateway to track SSL errors.

### Diagram
```mermaid
graph TD
    A[Internet] -->|HTTPS| B[Application Gateway <br> (Public IP, WAF, 10.1.0.0/24)]
    B -->|HTTPS (or HTTP), via UDR| C[Fortinet HA Firewall <br> (Hub VNet, 10.0.0.4)]
    C -->|HTTPS (or HTTP)| D[Function App <br> (Spoke VNet, Private Endpoint, 10.2.1.5)]
    D -->|Return Traffic| C
    C -->|Return Traffic| B
    B -->|HTTPS| A
```



---

### Why the SSL Transition Works
- **Frontend SSL**: The listener’s HTTPS configuration with a trusted certificate encrypts traffic from clients to the Application Gateway, securing public internet communication.
- **Backend SSL (Optional)**: Using HTTPS to the Function App’s private endpoint (with `*.azurewebsites.net` or a custom certificate) ensures end-to-end encryption, aligning with your no-internet-traffic policy.
- **Firewall Integration**: Updated policies allow port 443 traffic, maintaining inspection and routing through the hub.
- **Private Endpoint**: The Function App remains inaccessible publicly, with all traffic routed privately via the VNet and firewall.
- **WAF and Monitoring**: HTTPS enhances WAF security and logging, protecting the API and providing visibility.

### Additional Notes
- **Certificate Options**:
  - **Let’s Encrypt**: Free, automated, ideal for testing and production. Requires DNS validation or HTTP challenge (temporarily enable HTTP listener for validation).
  - **Azure Key Vault**: Simplifies certificate management and renewal, integrates with Application Gateway.
  - **Self-Signed**: Quick for testing but requires manual trust by clients, unsuitable for production.
- **Performance**: HTTPS adds slight overhead (TLS handshake), but modern protocols (TLS 1.3) minimize impact.
- **HTTP Redirect**: Adding an HTTP-to-HTTPS redirect improves user experience and security.
- **ARM Template Update** (for HTTPS):
  ```json
  {
    "type": "Microsoft.Network/applicationGateways",
    "apiVersion": "2023-04-01",
    "name": "myAppGateway",
    "location": "eastus",
    "properties": {
      "sku": { "name": "Standard_v2", "tier": "Standard_v2" },
      "sslCertificates": [
        {
          "name": "AppGwCert",
          "properties": {
            "data": "[parameters('certificateData')]",
            "password": "[parameters('certificatePassword')]"
          }
        }
      ],
      "frontendIPConfigurations": [
        {
          "name": "appGwPublicFrontendIp",
          "properties": {
            "publicIPAddress": { "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'AppGwPublicIP')]" }
          }
        }
      ],
      "frontendPorts": [{ "name": "port_443", "properties": { "port": 443 } }],
      "backendAddressPools": [
        {
          "name": "FunctionAppBackend",
          "properties": { "backendAddresses": [{ "fqdn": "myfunctionapp.azurewebsites.net" }] }
        }
      ],
      "backendHttpSettingsCollection": [
        {
          "name": "FunctionAppHttpSettings",
          "properties": {
            "port": 443,
            "protocol": "Https",
            "hostName": "myfunctionapp.azurewebsites.net",
            "probe": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/probes/FunctionAppHealthProbe')]" },
            "trustedRootCertificateNames": [] // Use well-known CA for *.azurewebsites.net
          }
        }
      ],
      "httpListeners": [
        {
          "name": "FunctionAppHttpsListener",
          "properties": {
            "frontendIPConfiguration": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/frontendIPConfigurations/appGwPublicFrontendIp')]" },
            "frontendPort": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/frontendPorts/port_443')]" },
            "protocol": "Https",
            "sslCertificate": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/sslCertificates/AppGwCert')]" },
            "hostName": "api.contoso.com"
          }
        }
      ],
      "requestRoutingRules": [
        {
          "name": "FunctionAppHttpsRule",
          "properties": {
            "ruleType": "Basic",
            "httpListener": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/httpListeners/FunctionAppHttpsListener')]" },
            "backendAddressPool": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/backendAddressPools/FunctionAppBackend')]" },
            "backendHttpSettings": { "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'myAppGateway'), '/backendHttpSettingsCollection/FunctionAppHttpSettings')]" }
          }
        }
      ],
      "probes": [
        {
          "name": "FunctionAppHealthProbe",
          "properties": {
            "protocol": "Https",
            "host": "myfunctionapp.azurewebsites.net",
            "path": "/api/health",
            "interval": 30,
            "timeout": 30,
            "unhealthyThreshold": 3
          }
        }
      ]
    }
  }
  ```

If you need specific CLI commands, certificate generation scripts, or further details on any step, let me know!
